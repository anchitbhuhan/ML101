{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from mpl_toolkits import mplot3d\n",
    "from sklearn import linear_model\n",
    "import statsmodels.api as sm\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "data = pd.read_csv(\"C:\\\\Users\\\\Nihal Anand\\\\Desktop\\\\ML proj\\\\ML101-test\\\\ML101-test\\\\parkinsons_updrs.data.csv\")\n",
    "X1 = data['RPDE']\n",
    "X2 = data['HNR']\n",
    "\n",
    "Y1 = data['total_UPDRS']\n",
    "Y2 = data['motor_UPDRS']\n",
    "X1 = np.array((X1 - X1.min())-(X1.max() - X1.min()))\n",
    "X2 = np.array((X2 - X2.min())-(X2.max() - X2.min()))\n",
    "Y1 = np.array((Y1 - Y1.min())-(Y1.max() - Y1.min()))\n",
    "\n",
    "data['RPDE'] = X1\n",
    "data['HNR'] = X2\n",
    "data['total_UPDRS'] = Y1\n",
    "\n",
    "plt.scatter(X1, Y1, color='red')\n",
    "plt.title('RPDE Vs total_UPDRS', fontsize=14)\n",
    "plt.xlabel('RPDE', fontsize=14)\n",
    "plt.ylabel('total_UPDRS', fontsize=14)\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    " \n",
    "plt.scatter(X2, Y1, color='green')\n",
    "plt.title('total_UPDRS Vs HNR', fontsize=14)\n",
    "plt.xlabel('HNR', fontsize=14)\n",
    "plt.ylabel('total_UPDRS', fontsize=14)\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "X = data[['RPDE','HNR']]\n",
    "Y = data['total_UPDRS']\n",
    "\n",
    "X_train, X_test, Y_train, Y_test= train_test_split(X,Y,test_size=0.2, random_state=0)\n",
    "\n",
    "regr = linear_model.LinearRegression()\n",
    "regr.fit(X_train, Y_train)\n",
    "\n",
    "print('Intercept: \\n', regr.intercept_)\n",
    "print('Coefficients: \\n', regr.coef_)\n",
    "\n",
    "\n",
    "RPDE = 0.7\n",
    "HNR = 0.11\n",
    "Y_pred=regr.predict(X_test)\n",
    "#print ('Predicted total UPDRS: \\n', regr.predict(X_test))\n",
    "test_set_rmse = (np.sqrt(mean_squared_error(Y_test,Y_pred)))\n",
    "\n",
    "test_set_r2 = r2_score(Y_test, Y_pred)\n",
    "print(test_set_rmse)\n",
    "print(test_set_r2)\n",
    "\n",
    "X = sm.add_constant(X)\n",
    " \n",
    "model = sm.OLS(Y, X).fit()\n",
    "predictions = model.predict(X) \n",
    " \n",
    "print_model = model.summary()\n",
    "print(print_model)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
